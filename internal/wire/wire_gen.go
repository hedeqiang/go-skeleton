// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/hedeqiang/skeleton/internal/app"
	"github.com/hedeqiang/skeleton/internal/config"
	"github.com/hedeqiang/skeleton/internal/handler/v1"
	"github.com/hedeqiang/skeleton/internal/repository"
	"github.com/hedeqiang/skeleton/internal/service"
	"github.com/hedeqiang/skeleton/pkg/database"
	"github.com/hedeqiang/skeleton/pkg/logger"
	"github.com/hedeqiang/skeleton/pkg/mq"
	"github.com/hedeqiang/skeleton/pkg/redis"
)

// Injectors from wire.go:

// InitializeApplication 初始化应用程序
// Wire 会自动生成这个函数的实现
func InitializeApplication() (*app.App, error) {
	configConfig, err := config.LoadConfig()
	if err != nil {
		return nil, err
	}
	configLogger := ProvideLoggerConfig(configConfig)
	zapLogger, err := logger.New(configLogger)
	if err != nil {
		return nil, err
	}
	v := ProvideDatabasesConfig(configConfig)
	v2, err := database.NewDatabases(v)
	if err != nil {
		return nil, err
	}
	db, err := ProvideMainDatabase(v2)
	if err != nil {
		return nil, err
	}
	configRedis := ProvideRedisConfig(configConfig)
	client, err := redis.NewRedis(configRedis)
	if err != nil {
		return nil, err
	}
	rabbitMQ := ProvideRabbitMQConfig(configConfig)
	connection, err := mq.NewRabbitMQ(rabbitMQ)
	if err != nil {
		return nil, err
	}
	userRepository := repository.NewUserRepository(db)
	userService := service.NewUserService(userRepository)
	userHandler := v1.NewUserHandler(userService, zapLogger)
	producer := ProvideProducer(connection)
	helloService := service.NewHelloService(producer)
	helloHandler := v1.NewHelloHandler(helloService, zapLogger)
	schedulerService, err := ProvideSchedulerService(zapLogger)
	if err != nil {
		return nil, err
	}
	jobRegistry := ProvideJobRegistry(schedulerService, zapLogger, configConfig)
	schedulerHandler := v1.NewSchedulerHandler(jobRegistry, zapLogger)
	appApp := ProvideApp(zapLogger, configConfig, v2, db, client, connection, userHandler, helloHandler, schedulerHandler, jobRegistry)
	return appApp, nil
}
