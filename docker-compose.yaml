services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: skeleton_postgres
    environment:
      POSTGRES_DB: skeleton
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-123456}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - skeleton_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: skeleton_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - skeleton_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # RabbitMQ 消息队列
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: skeleton_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-admin123}
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - skeleton_network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    restart: unless-stopped

  # API 服务
  api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE: api
        VERSION: ${VERSION:-latest}
        BUILD_TIME: ${BUILD_TIME}
        GIT_COMMIT: ${GIT_COMMIT}
    container_name: skeleton_api
    environment:
      - CONFIG_FILE=/app/configs/config.docker.yaml
      - APP_ENV=${APP_ENV:-development}
      - APP_HOST=0.0.0.0
      - APP_PORT=8080
    ports:
      - "${API_PORT:-8080}:8080"
    volumes:
      - ./configs:/app/configs:ro
      - ./logs:/app/logs
    networks:
      - skeleton_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # 消息消费者服务
  consumer:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE: consumer
        VERSION: ${VERSION:-latest}
        BUILD_TIME: ${BUILD_TIME}
        GIT_COMMIT: ${GIT_COMMIT}
    container_name: skeleton_consumer
    environment:
      - CONFIG_FILE=/app/configs/config.docker.yaml
      - APP_ENV=${APP_ENV:-development}
    volumes:
      - ./configs:/app/configs:ro
      - ./logs:/app/logs
    networks:
      - skeleton_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  # 调度器服务
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE: scheduler
        VERSION: ${VERSION:-latest}
        BUILD_TIME: ${BUILD_TIME}
        GIT_COMMIT: ${GIT_COMMIT}
    container_name: skeleton_scheduler
    environment:
      - CONFIG_FILE=/app/configs/config.docker.yaml
      - APP_ENV=${APP_ENV:-development}
    volumes:
      - ./configs:/app/configs:ro
      - ./logs:/app/logs
    networks:
      - skeleton_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  # 数据库迁移服务（一次性任务）
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE: migrate
        VERSION: ${VERSION:-latest}
    container_name: skeleton_migrate
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD:-123456}
      - DATABASE_NAME=skeleton
    volumes:
      - ./configs:/app/configs:ro
    networks:
      - skeleton_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    profiles:
      - migration

  # 数据种子服务（一次性任务）
  seed:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE: seed
        VERSION: ${VERSION:-latest}
    container_name: skeleton_seed
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD:-123456}
      - DATABASE_NAME=skeleton
    volumes:
      - ./configs:/app/configs:ro
    networks:
      - skeleton_network
    depends_on:
      migrate:
        condition: service_completed_successfully
    restart: "no"
    profiles:
      - seeding



# 网络配置
networks:
  skeleton_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷配置
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
 